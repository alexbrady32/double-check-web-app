@model DoubleCheck.Models.Assignment

@{
    ViewBag.Title = "New Assignment";
}


<div class="Panel">

    <div class="Panel-Header">
        <p>&nbsp;</p>
        <div class="Panel-Header-Title">
            <h3>Add New</h3>
            <h4>Assignment</h4>
        </div>
        <div class="Panel-Header-Icon">
            <i class="fa fa-plus-circle fa-lg"></i>
        </div>
    </div>



    <div class="Panel-Body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group">
                @Html.Label("Class", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.C_Id, (SelectList)ViewBag.AppDataClassList, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.C_Id, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group">
                @Html.Label("Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.T_Id, (SelectList)ViewBag.AppDataTypes, htmlAttributes: new { @class = "form-control", @id = "assignmentType" })
                    @Html.ValidationMessageFor(model => model.T_Id, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group" id="container" style="display:none">
                <label class="control-label col-md-2">About how many pages will you be reading?</label>
                <div class="col-md-10">
                    <input type="text" class="form-control" id="numberOfPages" onblur="calculateTime()"/>
                </div> 
                <br /><br /><br />  
            </div>

            <div class="form-group">
                @Html.Label("Due Date", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Due_Date, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                    @Html.ValidationMessageFor(model => model.Due_Date, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group">
                @Html.Label("Estimated Time to Complete (in minutes)", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TTC, new { htmlAttributes = new { @class = "form-control", @id = "estimatedTTC"} })
                    @Html.ValidationMessageFor(model => model.TTC, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group">
                @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br /><br />

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-primary btn-create" />
                </div>
            </div>
            <br /><br /><br />

        }
        <div>
            <br />
            <a href="@Url.Action("Index", "Assignments")">&#x21a9; Back to List</a>
        </div>
    </div>
</div>

<script>
    function calculateTime() {
        var selection = document.getElementById("assignmentType").value;
        var ttc = document.getElementById("estimatedTTC");
        var pagesInput = document.getElementById("numberOfPages");
        // give estimatedTTC 300 words per page * # of pages / (ViewBag.ClozeMultiplier * WPM)
        if (pagesInput.value != "") {
            var wpm;
            var pages = parseInt(pagesInput.value);
            switch (selection) {
                case "9":
                    wpm = 100;
                    ttc.value = Math.round((300 * pages) / (@ViewBag.ClozeMultiplier * wpm));
                    break;
                case "10":
                    wpm = 200;
                    ttc.value = Math.round((300 * pages) / (@ViewBag.ClozeMultiplier * wpm));
                    break;
                case "11":
                    wpm = 300;
                    ttc.value = Math.round((300 * pages) / (@ViewBag.ClozeMultiplier * wpm));
                    break;
                default:
                    $("#container").addClass("hidden");
                    break;
            }

        }
    }

    document.getElementById("assignmentType").onchange = function () {
        var selection = document.getElementById("assignmentType").value;
        var container = document.getElementById("container");
        switch (selection) {
            case "9":
                container.style.display = "block";
                calculateTime();
                break;
            case "10":
                container.style.display = "block";
                calculateTime();
                break;
            case "11":
                container.style.display = "block";
                calculateTime();
                break;
            default:
                container.style.display = "none";
                break;
        }
    }
</script>


